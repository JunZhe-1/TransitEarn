import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import * as React from 'react';
import { SeriesContext } from '../context/SeriesContextProvider';
import { CartesianContext } from '../context/CartesianContextProvider';
import { BarElement } from './BarElement';
import { isBandScaleConfig } from '../models/axis';

/**
 * Solution of the equations
 * W = barWidth * N + offset * (N-1)
 * offset / (offset + barWidth) = r
 * @param bandWidth The width available to place bars.
 * @param numberOfGroups The number of bars to place in that space.
 * @param gapRatio The ratio of the gap between bars over the bar width.
 * @returns The bar width and the offset between bars.
 */
import { jsx as _jsx } from "react/jsx-runtime";
function getBandSize(_ref) {
  var W = _ref.bandWidth,
    N = _ref.numberOfGroups,
    r = _ref.gapRatio;
  if (r === 0) {
    return {
      barWidth: W / N,
      offset: 0
    };
  }
  var barWidth = W / (N + (N - 1) * r);
  var offset = r * barWidth;
  return {
    barWidth: barWidth,
    offset: offset
  };
}
export function BarPlot() {
  var seriesData = React.useContext(SeriesContext).bar;
  var axisData = React.useContext(CartesianContext);
  if (seriesData === undefined) {
    return null;
  }
  var series = seriesData.series,
    stackingGroups = seriesData.stackingGroups;
  var xAxis = axisData.xAxis,
    yAxis = axisData.yAxis,
    xAxisIds = axisData.xAxisIds,
    yAxisIds = axisData.yAxisIds;
  var defaultXAxisId = xAxisIds[0];
  var defaultYAxisId = yAxisIds[0];
  return /*#__PURE__*/_jsx(React.Fragment, {
    children: stackingGroups.flatMap(function (_ref2, groupIndex) {
      var groupIds = _ref2.ids;
      return groupIds.flatMap(function (seriesId) {
        var _series$seriesId$xAxi, _series$seriesId$yAxi;
        var xAxisKey = (_series$seriesId$xAxi = series[seriesId].xAxisKey) != null ? _series$seriesId$xAxi : defaultXAxisId;
        var yAxisKey = (_series$seriesId$yAxi = series[seriesId].yAxisKey) != null ? _series$seriesId$yAxi : defaultYAxisId;
        var xAxisConfig = xAxis[xAxisKey];
        var yAxisConfig = yAxis[yAxisKey];
        if (!isBandScaleConfig(xAxisConfig)) {
          throw new Error("Axis with id \"".concat(xAxisKey, "\" shoud be of type \"band\" to display the bar series of id \"").concat(seriesId, "\""));
        }
        if (xAxis[xAxisKey].data === undefined) {
          throw new Error("Axis with id \"".concat(xAxisKey, "\" shoud have data property"));
        }
        var xScale = xAxisConfig.scale;
        var yScale = yAxisConfig.scale;

        // Currently assuming all bars are vertical
        var bandWidth = xScale.bandwidth();
        var _getBandSize = getBandSize({
            bandWidth: bandWidth,
            numberOfGroups: stackingGroups.length,
            gapRatio: xAxisConfig.barGapRatio
          }),
          barWidth = _getBandSize.barWidth,
          offset = _getBandSize.offset;

        // @ts-ignore TODO: fix when adding a correct API for customisation
        var _series$seriesId = series[seriesId],
          stackedData = _series$seriesId.stackedData,
          color = _series$seriesId.color;
        return stackedData.map(function (values, dataIndex) {
          var _xAxis$xAxisKey$data;
          var baseline = Math.min.apply(Math, _toConsumableArray(values));
          var value = Math.max.apply(Math, _toConsumableArray(values));
          return /*#__PURE__*/_jsx(BarElement, {
            id: seriesId,
            dataIndex: dataIndex,
            x: xScale((_xAxis$xAxisKey$data = xAxis[xAxisKey].data) == null ? void 0 : _xAxis$xAxisKey$data[dataIndex]) + groupIndex * (barWidth + offset),
            y: yScale(value),
            height: yScale(baseline) - yScale(value),
            width: barWidth,
            color: color,
            highlightScope: series[seriesId].highlightScope
          }, "".concat(seriesId, "-").concat(dataIndex));
        });
      });
    })
  });
}